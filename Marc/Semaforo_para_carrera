#include <FastLED.h>
#define NUM_LEDS 180

#define DATA_PIN 10

CRGB leds[NUM_LEDS];
int ledActual = 1; //led central
bool pAlante = true;

void setup() {
   FastLED.addLeds<NEOPIXEL, DATA_PIN>(leds, NUM_LEDS);
 delay(200);
 for (int n; n < NUM_LEDS; n ++) {
  leds[n] = CRGB::White;
  FastLED.show();
  delay(50);
 }

delay(500);
FastLED.clear();
FastLED.show();
delay(3000);
 semaforo();
  delay(1000);
  

}


void loop() {
  FastLED.clear();
  leds[ledActual] = CRGB::Purple;
  leds[ledActual +1] = CRGB::Purple;
  leds[ledActual -1] = CRGB::Purple;
  delay(50);
  FastLED.show();
  if (pAlante) {
    ledActual++;
    if (ledActual >118 ){
      pAlante = false;
    }
  }
  else {
    ledActual --;
    if (ledActual <1 ){
      pAlante = true;
      semaforo();
    }
  }
}

void semaforo()  {
  FastLED.clear();
   leds[4] = CRGB::Red;
  FastLED.show();
  delay(10);
    leds[5] = CRGB::Red;
    FastLED.show();
  delay(10);
    leds[6] = CRGB::Red;
    FastLED.show();
    tone(8, 670, 500);
    delay(1500);
    FastLED.clear();
    delay(10);
    leds[4] = CRGB::Red;
  FastLED.show();
  delay(10);
  leds[5] = CRGB::Red;
  FastLED.show();
  delay(10);
  leds[6] = CRGB::Black;
  FastLED.show();
  tone(8, 670, 500);
  delay(1500);
  FastLED.clear();
  delay(10);
   leds[4] = CRGB::Red;
  FastLED.show();
  delay(10);
  leds[5] = CRGB::Black;
  FastLED.show();
  delay(10);
  leds[6] = CRGB::Black;
  FastLED.show();
  tone(8, 670, 500);
  delay(1500);
   FastLED.clear();
   delay(10);
    leds[4] = CRGB::Green;
  FastLED.show();
  delay(10);
  leds[5] = CRGB::Green;
  FastLED.show();
  delay(10);
  leds[6] = CRGB::Green;
  FastLED.show();

  tone(8, 1000, 500);

  delay(600);
}
